require('dotenv').config();
const db = require('./models');

async function testDatabase() {
  try {
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await db.sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥ —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const books = await db.Book.findAll({
      include: [
        {
          model: db.Category,
          as: 'category',
          attributes: ['name', 'slug']
        },
        {
          model: db.Author,
          as: 'authors',
          through: { attributes: [] }, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
          attributes: ['name', 'authorType']
        }
      ],
      order: [['popularity', 'DESC']]
    });

    console.log('\nüìö –ö–Ω–∏–≥–∏ –≤ –ë–î (–ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏):');
    console.log('‚ïê'.repeat(80));

    books.forEach((book, index) => {
      const author = book.authors[0];
      console.log(`\n${index + 1}. ${book.title}`);
      console.log(`   –ê–≤—Ç–æ—Ä: ${author.name} (${author.authorType})`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${book.category.name}`);
      console.log(`   –¶–µ–Ω–∞: ${book.price} —Ä—É–±. (${book.priceCategory})`);
      console.log(`   –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${book.popularity} –ø–æ–∫—É–ø–æ–∫`);
      console.log(`   –ù–∞ —Å–∫–ª–∞–¥–µ: ${book.stock} —à—Ç.`);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–∏–≥
    const categories = await db.Category.findAll({
      include: [{
        model: db.Book,
        as: 'books',
        attributes: []
      }],
      attributes: [
        'id',
        'name',
        [db.sequelize.fn('COUNT', db.sequelize.col('books.id')), 'bookCount']
      ],
      group: ['Category.id'],
      raw: true
    });

    console.log('\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    console.log('‚ïê'.repeat(40));
    categories.forEach(cat => {
      console.log(`${cat.name}: ${cat.bookCount} –∫–Ω–∏–≥(–∏)`);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ —Ç–∏–ø—É
    const russianAuthors = await db.Author.count({ where: { authorType: 'russian' } });
    const foreignAuthors = await db.Author.count({ where: { authorType: 'foreign' } });

    console.log('\n\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º:');
    console.log('‚ïê'.repeat(40));
    console.log(`–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–≤—Ç–æ—Ä—ã: ${russianAuthors}`);
    console.log(`–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã: ${foreignAuthors}`);

    // –ö–Ω–∏–≥–∏ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º
    const lowStock = await db.Book.findAll({
      where: {
        stock: {
          [db.Sequelize.Op.lt]: 10
        }
      },
      attributes: ['title', 'stock'],
      order: [['stock', 'ASC']]
    });

    if (lowStock.length > 0) {
      console.log('\n\n‚ö†Ô∏è  –ö–Ω–∏–≥–∏ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º (< 10 —à—Ç.):');
      console.log('‚ïê'.repeat(40));
      lowStock.forEach(book => {
        console.log(`${book.title}: ${book.stock} —à—Ç.`);
      });
    }

    console.log('\n\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

testDatabase();
