/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π (10 —Ç–∞–±–ª–∏—Ü)
 * –ó–∞–ø—É—Å–∫: node test-models.js
 */

const { sequelize } = require("./models");

async function testModels() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π Sequelize (10 —Ç–∞–±–ª–∏—Ü)...\n");

  try {
    console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await sequelize.authenticate();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.");

    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    console.log("\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:");
    Object.keys(sequelize.models).forEach((modelName) => {
      console.log(`  - ${modelName}`);
    });

    console.log("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π:");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    const {
      User,
      Book,
      Category,
      Author,
      Order,
      Publisher,
      Review,
      CartItem,
      Wishlist,
      BookAuthor,
      OrderItem,
    } = sequelize.models;

    console.log(
      `  - User –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(User.associations).join(", ")}`
    );
    console.log(
      `  - Book –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Book.associations).join(", ")}`
    );
    console.log(
      `  - Category –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Category.associations).join(
        ", "
      )}`
    );
    console.log(
      `  - Author –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Author.associations).join(", ")}`
    );
    console.log(
      `  - Order –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Order.associations).join(", ")}`
    );
    console.log(
      `  - Publisher –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Publisher.associations).join(
        ", "
      )}`
    );
    console.log(
      `  - Review –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Review.associations).join(", ")}`
    );
    console.log(
      `  - CartItem –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(CartItem.associations).join(
        ", "
      )}`
    );
    console.log(
      `  - Wishlist –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(Wishlist.associations).join(
        ", "
      )}`
    );
    console.log(
      `  - BookAuthor –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(BookAuthor.associations).join(
        ", "
      )}`
    );
    console.log(
      `  - OrderItem –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏: ${Object.keys(OrderItem.associations).join(
        ", "
      )}`
    );

    console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π:");
    console.log(`  - –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: ${Object.keys(sequelize.models).length}`);
    console.log(
      `  - –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: User, Category, Publisher, Author, Book`
    );
    console.log(`  - –°–≤—è–∑—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: BookAuthor`);
    console.log(
      `  - –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞: Order, OrderItem, Review, CartItem, Wishlist`
    );

    console.log("\n‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    console.log("üéØ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –ë–î");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:", error.message);

    if (error.name === "ConnectionError") {
      console.log("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
      console.log("  1. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      console.log(
        "  2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ config/config.json"
      );
      console.log("  3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞");
      console.log(
        "  4. –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: npx sequelize-cli db:migrate"
      );
    }
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testModels();
}

module.exports = { testModels };
