const express = require('express');
const router = express.Router();

/**
 * @route   GET /api
 * @desc    Получение информации о всех доступных API эндпоинтах
 * @access  Public
 */
router.get('/', (req, res) => {
  const apiInfo = {
    success: true,
    message: 'Bookstore REST API v1.0',
    serverTime: new Date().toISOString(),
    endpoints: {
      auth: {
        description: 'Аутентификация и управление пользователями',
        baseUrl: '/api/auth',
        endpoints: {
          'POST /register': 'Регистрация нового пользователя',
          'POST /login': 'Вход в систему',
          'GET /profile': 'Получение профиля текущего пользователя (требует токен)',
          'PUT /profile': 'Обновление профиля (требует токен)'
        }
      },
      books: {
        description: 'Управление книгами',
        baseUrl: '/api/books',
        endpoints: {
          'GET /': 'Получение списка книг с пагинацией и фильтрами',
          'GET /:id': 'Получение книги по ID',
          'POST /': 'Создание новой книги (только админы)',
          'PUT /:id': 'Обновление книги (только админы)',
          'DELETE /:id': 'Удаление книги (только админы)',
          'GET /search': 'Поиск книг по различным критериям'
        }
      },
      categories: {
        description: 'Управление категориями книг',
        baseUrl: '/api/categories',
        endpoints: {
          'GET /': 'Получение списка категорий с иерархией',
          'GET /:id': 'Получение категории по ID',
          'GET /:id/books': 'Получение книг категории с пагинацией',
          'POST /': 'Создание новой категории (только админы)',
          'PUT /:id': 'Обновление категории (только админы)',
          'DELETE /:id': 'Удаление категории (только админы)'
        }
      },
      publishers: {
        description: 'Управление издательствами',
        baseUrl: '/api/publishers',
        endpoints: {
          'GET /': 'Получение списка издателей с пагинацией и поиском',
          'GET /:id': 'Получение издателя по ID',
          'GET /:id/books': 'Получение книг издателя с пагинацией',
          'POST /': 'Создание нового издателя (только админы)',
          'PUT /:id': 'Обновление издателя (только админы)',
          'DELETE /:id': 'Удаление издателя (только админы)'
        }
      },
      authors: {
        description: 'Управление авторами',
        baseUrl: '/api/authors',
        endpoints: {
          'GET /': 'Получение списка авторов с пагинацией и поиском',
          'GET /:id': 'Получение автора по ID',
          'GET /:id/books': 'Получение книг автора с пагинацией',
          'POST /': 'Создание нового автора (только админы)',
          'PUT /:id': 'Обновление автора (только админы)',
          'DELETE /:id': 'Удаление автора (только админы)'
        }
      },
      cart: {
        description: 'Управление корзиной покупок',
        baseUrl: '/api/cart',
        endpoints: {
          'GET /': 'Получение корзины текущего пользователя (требует токен)',
          'POST /': 'Добавление книги в корзину (требует токен)',
          'PUT /:id': 'Обновление количества товара в корзине (требует токен)',
          'DELETE /:id': 'Удаление товара из корзины (требует токен)',
          'DELETE /': 'Очистка корзины (требует токен)'
        }
      }
    },
    authentication: {
      description: 'Система аутентификации на основе JWT токенов',
      tokenHeader: 'Authorization: Bearer <token>',
      roles: {
        user: 'Обычный пользователь - доступ к корзине и просмотру каталога',
        admin: 'Администратор - полный доступ к управлению данными'
      }
    },
    queryParameters: {
      pagination: {
        page: 'Номер страницы (по умолчанию: 1)',
        limit: 'Количество элементов на странице (по умолчанию: 20, максимум: 100)'
      },
      search: {
        search: 'Поисковый запрос для фильтрации результатов'
      },
      books: {
        category: 'Фильтр по категории',
        publisher: 'Фильтр по издателю',
        author: 'Фильтр по автору',
        minPrice: 'Минимальная цена',
        maxPrice: 'Максимальная цена',
        year: 'Год издания',
        inStock: 'Только товары в наличии (true/false)'
      }
    },
    responseFormat: {
      success: {
        success: true,
        data: 'Данные ответа',
        message: 'Сообщение (опционально)',
        pagination: 'Информация о пагинации (для списков)'
      },
      error: {
        success: false,
        message: 'Описание ошибки',
        errors: 'Массив ошибок валидации (опционально)'
      }
    }
  };

  res.json(apiInfo);
});

module.exports = router;