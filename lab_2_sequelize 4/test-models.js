/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π
 * –ó–∞–ø—É—Å–∫: node test-models.js
 */

const { User, Book, sequelize } = require("./models");

async function testModels() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Sequelize...\n");

  try {
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...");
    await sequelize.authenticate();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!\n");

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üë§ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    const testUser = await User.createUser({
      email: "test@example.com",
      password: "TestPass123",
      first_name: "–ò–≤–∞–Ω",
      last_name: "–¢–µ—Å—Ç–æ–≤",
    });
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", {
      id: testUser.id,
      email: testUser.email,
      name: `${testUser.first_name} ${testUser.last_name}`,
    });

    // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log("\nüîê –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
    const authUser = await User.authenticate("test@example.com", "TestPass123");
    console.log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", authUser ? "–î–∞" : "–ù–µ—Ç");

    // –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const wrongAuth = await User.authenticate("test@example.com", "WrongPass");
    console.log(
      "‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:",
      wrongAuth ? "–ü—Ä–æ–≤–∞–ª" : "–†–∞–±–æ—Ç–∞–µ—Ç"
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã
    console.log("\nüìö –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥...");
    const books = await Book.findAll({ limit: 3 });
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –≤ –ë–î:`);
    books.forEach((book) => {
      console.log(
        `  üìñ ${book.title} - ${book.author} (${book.price}‚ÇΩ, —Å–∫–ª–∞–¥: ${book.stock})`
      );
    });

    // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥ –≤ –Ω–∞–ª–∏—á–∏–∏
    console.log("\nüì¶ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é...");
    const availableBooks = await Book.findAvailable({ limit: 5 });
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${availableBooks.length} –∫–Ω–∏–≥ –≤ –Ω–∞–ª–∏—á–∏–∏:`);
    availableBooks.forEach((book) => {
      console.log(
        `  üìñ ${book.title} - –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${book.popularity}, —Å–∫–ª–∞–¥: ${book.stock}`
      );
    });

    // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    console.log("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥...");
    const searchResults = await Book.search("–ø—Ä–∏–Ω—Ü");
    console.log(`‚úÖ –ü–æ–∏—Å–∫ –ø–æ "–ø—Ä–∏–Ω—Ü": –Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} –∫–Ω–∏–≥`);
    searchResults.forEach((book) => {
      console.log(`  üìñ ${book.title} - ${book.author}`);
    });

    // –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∫–Ω–∏–≥–∏ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
    console.log("\nüí∞ –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –∫–Ω–∏–≥–∏...");
    const transaction = await sequelize.transaction();

    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–Ω–∏–≥—É
      const { Op } = require("sequelize");
      const bookToBuy = await Book.findOne({
        where: { stock: { [Op.gt]: 0 } },
        transaction,
      });
      if (bookToBuy) {
        console.log(
          `üìñ –ü–æ–∫—É–ø–∞–µ–º: ${bookToBuy.title} (—Å–∫–ª–∞–¥ –¥–æ –ø–æ–∫—É–ø–∫–∏: ${bookToBuy.stock})`
        );

        // –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        await Book.purchaseBooks(bookToBuy.id, 1, transaction);

        await transaction.commit();

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        await testUser.addOrder({
          book_id: bookToBuy.id,
          title: bookToBuy.title,
          quantity: 1,
          price: bookToBuy.price,
          total: bookToBuy.price,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await bookToBuy.reload();
        await testUser.reload();

        console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∫–ª–∞–¥ –ø–æ—Å–ª–µ: ${bookToBuy.stock}`);
        console.log(`‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ: ${bookToBuy.popularity}`);
        console.log(
          `‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser.getOrdersCount()} –∑–∞–∫–∞–∑–æ–≤`
        );
        console.log(`‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${testUser.getTotalSpent()}‚ÇΩ`);
      }
    } catch (error) {
      await transaction.rollback();
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", error.message);
    }

    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–Ω–∏–≥
    console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–Ω–∏–≥...");
    const stats = await Book.getStats();
    console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", {
      "–í—Å–µ–≥–æ –∫–Ω–∏–≥": stats.total,
      "–í –Ω–∞–ª–∏—á–∏–∏": stats.available,
      –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å: stats.outOfStock,
      "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏": `${stats.percentage}%`,
    });

    // –¢–µ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥
    console.log("\nüèÜ –¢–æ–ø-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥...");
    const popularBooks = await Book.findPopular(3);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${popularBooks.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–∏–≥:`);
    popularBooks.forEach((book, index) => {
      console.log(
        `  ${index + 1}. ${book.title} - –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: ${book.popularity}`
      );
    });

    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
    console.error("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", error);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    try {
      await User.destroy({ where: { email: "test@example.com" } });
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
    } catch (error) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:", error.message);
    }

    await sequelize.close();
    console.log("üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ");
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testModels()
    .then(() => {
      console.log("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

module.exports = testModels;
