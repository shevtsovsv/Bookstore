/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–∞–≤–∏–≥–∞—Ü–∏—è
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è localStorage
const AUTH_TOKEN_KEY = "bookstore_auth_token";
const USER_DATA_KEY = "bookstore_user_data";

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
 */
const AuthToken = {
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
  save(token) {
    try {
      localStorage.setItem(AUTH_TOKEN_KEY, token);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      return false;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
  get() {
    try {
      return localStorage.getItem(AUTH_TOKEN_KEY);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      return null;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
  remove() {
    try {
      localStorage.removeItem(AUTH_TOKEN_KEY);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      return false;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
  exists() {
    return !!this.get();
  },
};

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const UserData = {
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  save(userData) {
    try {
      localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return false;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  get() {
    try {
      const data = localStorage.getItem(USER_DATA_KEY);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return null;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  remove() {
    try {
      localStorage.removeItem(USER_DATA_KEY);
      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return false;
    }
  },
};

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
const Auth = {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  isAuthenticated() {
    return AuthToken.exists() && UserData.get() !== null;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser() {
    if (this.isAuthenticated()) {
      return UserData.get();
    }
    return null;
  },

  // –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ)
  login(token, userData) {
    const tokenSaved = AuthToken.save(token);
    const userSaved = UserData.save(userData);

    if (tokenSaved && userSaved) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", userData.email);
      this.updateNavigation();
      return true;
    }

    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return false;
  },

  // –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  logout() {
    AuthToken.remove();
    UserData.remove();
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
    this.updateNavigation();

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.location.href = "../index.html";
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  updateNavigation() {
    const isAuth = this.isAuthenticated();
    const user = this.getCurrentUser();

    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const registerLink = document.querySelector('a[href*="register"]');
    const loginLink = document.querySelector('a[href*="login"]');

    if (isAuth && user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑–∞—Ç—å –∏–º—è –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
      if (registerLink) {
        registerLink.textContent = user.firstName || user.email;
        registerLink.href = "#";
        registerLink.onclick = (e) => {
          e.preventDefault();
          this.showUserMenu(e.target);
        };
      }

      if (loginLink) {
        loginLink.textContent = "–í—ã—Ö–æ–¥";
        loginLink.href = "#";
        loginLink.onclick = (e) => {
          e.preventDefault();
          this.logout();
        };
      }
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      if (registerLink) {
        registerLink.textContent = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è";
        registerLink.href = "register.html";
        registerLink.onclick = null;
      }

      if (loginLink) {
        loginLink.textContent = "–í—Ö–æ–¥";
        loginLink.href = "login.html";
        loginLink.onclick = null;
      }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    this.updateCartIcon();
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
  updateCartIcon() {
    const menu = document.querySelector(".menu");
    if (!menu) return;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∫–æ–Ω–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    let cartIcon = menu.querySelector(".cart-icon");

    if (!cartIcon) {
      // –°–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
      const cartLi = document.createElement("li");
      cartLi.innerHTML = `
        <a href="cart.html" class="cart-icon" title="–ö–æ—Ä–∑–∏–Ω–∞">
          <span class="cart-icon-text">üõí</span>
          <span class="cart-count" id="cart-count">0</span>
        </a>
      `;
      menu.appendChild(cartLi);
      cartIcon = cartLi.querySelector(".cart-icon");
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (this.isAuthenticated()) {
      this.updateCartCount();
    } else {
      const cartCount = document.getElementById("cart-count");
      if (cartCount) cartCount.textContent = "0";
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  async updateCartCount() {
    try {
      const token = AuthToken.get();
      if (!token) return;

      const response = await fetch("/api/cart", {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        const cartCount = document.getElementById("cart-count");
        if (cartCount && data.data && data.data.summary) {
          cartCount.textContent = data.data.summary.totalItems || 0;
        }
      }
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã:", error);
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  showUserMenu(element) {
    // –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const menu = document.createElement("div");
    menu.className = "user-menu";
    menu.innerHTML = `
            <div class="user-menu-content">
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${this.getCurrentUser().firstName}!</p>
                <button onclick="Auth.logout()">–í—ã–π—Ç–∏</button>
            </div>
        `;

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é
    menu.style.position = "absolute";
    menu.style.top = element.offsetTop + element.offsetHeight + "px";
    menu.style.left = element.offsetLeft + "px";
    menu.style.zIndex = "1000";

    document.body.appendChild(menu);

    // –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    setTimeout(() => {
      document.addEventListener("click", function closeMenu(e) {
        if (!menu.contains(e.target)) {
          menu.remove();
          document.removeEventListener("click", closeMenu);
        }
      });
    }, 100);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  getAuthHeaders() {
    const token = AuthToken.get();
    return token
      ? {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        }
      : {
          "Content-Type": "application/json",
        };
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç API –Ω–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  handleApiResponse(response) {
    if (response.status === 401) {
      console.log("–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
      this.logout();
      return false;
    }
    return true;
  },
};

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏
 */
const FormUtils = {
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification(message, type = "info") {
    const notification = document.getElementById("notification");
    if (!notification) return;

    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.style.display = "block";

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      notification.style.display = "none";
    }, 5000);
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ø–æ–ª–µ
  showFieldError(fieldId, message) {
    const errorElement = document.getElementById(`${fieldId}-error`);
    const fieldElement = document.getElementById(fieldId);

    if (errorElement) {
      errorElement.textContent = message;
      errorElement.style.display = "block";
    }

    if (fieldElement) {
      fieldElement.classList.add("error");
    }
  },

  // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
  clearFormErrors() {
    const errorElements = document.querySelectorAll(".error-message");
    const fieldElements = document.querySelectorAll(".form-group input.error");

    errorElements.forEach((el) => {
      el.textContent = "";
      el.style.display = "none";
    });

    fieldElements.forEach((el) => {
      el.classList.remove("error");
    });
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏
  setButtonLoading(buttonId, loading = true) {
    const button = document.getElementById(buttonId);
    if (!button) return;

    const btnText = button.querySelector(".btn-text");
    const btnLoader = button.querySelector(".btn-loader");

    if (loading) {
      button.disabled = true;
      if (btnText) btnText.style.display = "none";
      if (btnLoader) btnLoader.style.display = "inline";
    } else {
      button.disabled = false;
      if (btnText) btnText.style.display = "inline";
      if (btnLoader) btnLoader.style.display = "none";
    }
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  validatePassword(password) {
    const errors = [];

    if (password.length < 8) {
      errors.push("–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
    }

    if (!/[A-Z]/.test(password)) {
      errors.push("–ú–∏–Ω–∏–º—É–º 1 –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞");
    }

    if (!/[a-z]/.test(password)) {
      errors.push("–°—Ç—Ä–æ—á–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã");
    }

    if (!/\d.*\d/.test(password)) {
      errors.push("–ú–∏–Ω–∏–º—É–º 2 —Ü–∏—Ñ—Ä—ã");
    }

    if (!/^[A-Za-z\d@$!%*?&]+$/.test(password)) {
      errors.push("–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã @$!%*?&");
    }

    return {
      isValid: errors.length === 0,
      errors: errors,
    };
  },

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  validatePasswordSimple(password) {
    return this.validatePassword(password).isValid;
  },
};

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */
const NavigationUtils = {
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  redirectAfterLogin() {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const returnUrl = sessionStorage.getItem("returnUrl");

    if (returnUrl) {
      sessionStorage.removeItem("returnUrl");
      window.location.href = returnUrl;
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
      window.location.href = "book.html";
    }
  },

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
  saveReturnUrl() {
    const currentPath = window.location.pathname + window.location.search;
    sessionStorage.setItem("returnUrl", currentPath);
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  requireAuth() {
    if (!Auth.isAuthenticated()) {
      this.saveReturnUrl();
      window.location.href = "login.html";
      return false;
    }
    return true;
  },
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", function () {
  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Auth.updateNavigation();

  console.log(
    "Auth utils initialized. User authenticated:",
    Auth.isAuthenticated()
  );
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.Auth = Auth;
window.AuthToken = AuthToken;
window.UserData = UserData;
window.FormUtils = FormUtils;
window.NavigationUtils = NavigationUtils;
